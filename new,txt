import os
import logging
import telebot
from rembg import remove
from PIL import Image, ImageOps, ImageFilter, ImageEnhance
import io

# Initialize logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Directory to store temporary images
TEMP_FOLDER = 'temp_images'

# Ensure the folder exists
if not os.path.exists(TEMP_FOLDER):
    os.makedirs(TEMP_FOLDER)

# Maximum image size (in MB) for input and output
MAX_IMAGE_SIZE = 11 * 1024 * 1024  # 11 MB

# Maximum allowed dimensions for images to save memory
MAX_WIDTH = 1500  # Example max width in pixels
MAX_HEIGHT = 1500  # Example max height in pixels

# Step 1: Handle /rm_bg command
@bot.message_handler(commands=['rm_bg'])
def rm_bg_command(message):
    logging.info(f"Received /rm_bg command from user {message.chat.id}")
    bot.reply_to(message, "Please send an image (up to 11MB) for background removal or resizing.")

# Store file_id temporarily in a dictionary
user_data = {}

# Step 2: Handle incoming images
@bot.message_handler(content_types=['photo'])
def handle_image(message):
    logging.info(f"Received image from user {message.chat.id}")
    file_info = bot.get_file(message.photo[-1].file_id)
    file_size = message.photo[-1].file_size

    if file_size > MAX_IMAGE_SIZE:
        bot.reply_to(message, "The image is larger than 11MB. Please upload a smaller image.")
        logging.warning(f"Image too large ({file_size} bytes) for user {message.chat.id}")
        return

    # Download the image
    downloaded_file = bot.download_file(file_info.file_path)
    image_path = os.path.join(TEMP_FOLDER, f"{message.photo[-1].file_id}.png")

    with open(image_path, 'wb') as new_file:
        new_file.write(downloaded_file)
        logging.info(f"Image saved to {image_path} for user {message.chat.id}")

    # Resize image to reduce memory usage if necessary
    img = Image.open(image_path)
    img.thumbnail((MAX_WIDTH, MAX_HEIGHT), Image.Resampling.LANCZOS)  # Resize to max dimensions using LANCZOS
    img.save(image_path)  # Overwrite the original file with the resized version
    logging.info(f"Image resized to fit within {MAX_WIDTH}x{MAX_HEIGHT} for user {message.chat.id}")

    # Store the image path and file ID for later use
    user_data[message.chat.id] = {
        'file_id': message.photo[-1].file_id,
        'image_path': image_path
    }

    # Ask the user for background color, sketch, or resize options
    markup = telebot.types.InlineKeyboardMarkup()
    options = ['Transparent', 'Red', 'Yellow', 'White', 'Black', 'Green', 'Sketch', 'Resize']
    for option in options:
        markup.add(telebot.types.InlineKeyboardButton(option, callback_data=f"bg_{option.lower()}"))
    
    bot.reply_to(message, "Choose the background color, apply a 2D sketch effect, or resize the image:", reply_markup=markup)
    logging.info(f"Sent options to user {message.chat.id}")

# Step 3: Handle background color, sketch effect, or resize choice
@bot.callback_query_handler(func=lambda call: call.data.startswith('bg_'))
def handle_color_choice(call):
    logging.info(f"User {call.message.chat.id} chose option: {call.data}")
    
    # Check if the user has uploaded an image
    if call.message.chat.id not in user_data:
        bot.reply_to(call.message, "Image not found. Please upload an image first.")
        logging.error(f"No image found for user {call.message.chat.id}")
        return
    
    # Extract the chosen option from callback data
    chosen_option = call.data.split('_')[1]

    # Retrieve the stored image path
    image_info = user_data.get(call.message.chat.id)
    image_path = image_info['image_path']

    if not os.path.exists(image_path):
        bot.reply_to(call.message, "Image processing failed. Please try again.")
        logging.error(f"Image file not found at {image_path} for user {call.message.chat.id}")
        return

    if chosen_option == 'resize':
        # Ask the user for new dimensions
        bot.send_message(call.message.chat.id, "Please enter the new dimensions in the format WIDTHxHEIGHT (e.g., 800x600):")
        bot.register_next_step_handler(call.message, resize_image)
    else:
        bot.reply_to(call.message, f"Processing the image with {chosen_option} effect...")
        process_image(call, chosen_option)

# Step 4: Resize the image
def resize_image(message):
    try:
        new_size = message.text.split('x')
        new_width = int(new_size[0])
        new_height = int(new_size[1])

        if message.chat.id not in user_data:
            bot.reply_to(message, "Image not found. Please upload an image first.")
            logging.error(f"No image found for user {message.chat.id}")
            return

        image_info = user_data.get(message.chat.id)
        image_path = image_info['image_path']

        # Open the original image and resize
        img = Image.open(image_path)
        img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
        
        # Save the resized image
        resized_image_path = os.path.join(TEMP_FOLDER, f"resized_{image_info['file_id']}.png")
        img.save(resized_image_path)

        # Send the resized image to the user
        with open(resized_image_path, 'rb') as resized_file:
            bot.send_photo(message.chat.id, resized_file)
        
        # Clean up temporary files
        os.remove(resized_image_path)
        bot.reply_to(message, "Image resized and sent successfully.")
        logging.info(f"Resized image sent to user {message.chat.id}")

    except Exception as e:
        bot.reply_to(message, "Invalid input. Please enter the dimensions in the format WIDTHxHEIGHT.")
        logging.error(f"Error resizing image for user {message.chat.id}: {str(e)}")

# Step 5: Process the image with the chosen effect (background color or sketch)
def process_image(call, chosen_option):
    try:
        image_info = user_data.get(call.message.chat.id)
        image_path = image_info['image_path']

        if chosen_option == 'sketch':
            # Convert image to a more detailed pencil sketch
            img = Image.open(image_path).convert("L")  # Convert to grayscale
            img = img.filter(ImageFilter.CONTOUR)  # Apply contour filter
            enhancer = ImageEnhance.Contrast(img)  # Enhance contrast for a deeper sketch
            img = enhancer.enhance(2.0)  # Make the sketch deeper

            processed_image_path = os.path.join(TEMP_FOLDER, f"sketch_{image_info['file_id']}.png")
        else:
            # Remove background
            with open(image_path, 'rb') as input_file:
                img_data = input_file.read()
                output_img_data = remove(img_data)
                logging.info(f"Background removed for user {call.message.chat.id}")

            # Convert to an Image object
            img = Image.open(io.BytesIO(output_img_data)).convert("RGBA")

            # Handle background color
            if chosen_option != 'transparent':
                bg_color_map = {
                    'red': (255, 0, 0, 255),
                    'yellow': (255, 255, 0, 255),
                    'white': (255, 255, 255, 255),
                    'black': (0, 0, 0, 255),
                    'green': (0, 255, 0, 255),
                }
                bg_color = bg_color_map.get(chosen_option, (255, 255, 255, 255))  # default to white

                # Create a background image
                bg = Image.new("RGBA", img.size, bg_color)
                img = Image.alpha_composite(bg, img)

            processed_image_path = os.path.join(TEMP_FOLDER, f"processed_{image_info['file_id']}.png")
        
        # Save the processed image
        img.save(processed_image_path)
        logging.info(f"Processed image saved to {processed_image_path} for user {call.message.chat.id}")

        # Send the processed image back to the user
        with open(processed_image_path, 'rb') as processed_file:
            bot.send_photo(call.message.chat.id, processed_file)
            logging.info(f"Processed image sent to user {call.message.chat.id}")

        # Clean up by deleting the images
        os.remove(image_path)
        os.remove(processed_image_path)
        logging.info(f"Temporary images cleaned up for user {call.message.chat.id}")

        # Clean up stored data
        del user_data[call.message.chat.id]

    except Exception as e:
        bot.reply_to(call.message, f"An error occurred: {str(e)}")
        logging.error(f"Error processing image for user {call.message.chat.id}: {str(e)}")
